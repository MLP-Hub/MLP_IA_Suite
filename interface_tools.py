# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MLP_IA_Suite
                                 A QGIS plugin
 This plugin contains an end-to-end workflow for analysing terrestrial oblique images 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-15
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Claire Wright | Mountain Legacy Project
        email                : claire.wright.mi@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsRasterLayer, QgsProject, QgsProcessing 
from qgis.gui import QgsMapToolPan

import os.path

def setScaleBoxVal(dlg, val):
    """Changes scale box value based on slider"""

    val = float(val / 10)
    val = str(val)
    dlg.Scale_lineEdit.setText(val)

def setScaleSlideVal(dlg, val):
    """Changes scale slider value based on text box"""

    val = float(val)
    val = int(val*10)
    dlg.Scale_slider.setValue(val)

def getFileFolder(lineEdit):
    """Allows user to select image file or folder"""

    def _selected(name):
        """Changes file mode depending on whether current selection is a file or a folder"""

        if os.path.isdir(name):
            dialog.setFileMode(QFileDialog.Directory)
        else:
            dialog.setFileMode(QFileDialog.ExistingFile)

  
    dialog = QFileDialog()
    dialog.setFileMode(dialog.ExistingFiles)
    dialog.setOption(dialog.DontUseNativeDialog)
    dialog.currentChanged.connect(_selected) #if selection changes from file to folder
        
    dialog.exec_()

    filepath = dialog.selectedFiles()
    lineEdit.setText(filepath[0])

def getFolder(lineEdit):
    """Select folder (usually output directory)"""

    dialog = QFileDialog()
    dialog.setFileMode(QFileDialog.Directory)
    dialog.setOption(dialog.DontUseNativeDialog)

    dialog.exec_()
    filepath = dialog.selectedFiles()
    lineEdit.setText(filepath[0])

def showImg(filepath, name, canvas):
    """Displays provided image in map canvas"""

    img_lyr= QgsRasterLayer(filepath, name)
    # Load mask as layer into mask map canvas
    QgsProject.instance().addMapLayer(img_lyr, False) # add layer to the registry (but don't load into main map)
    canvas.enableAntiAliasing(True)
    canvas.setExtent(img_lyr.extent()) # set extent to the extent of the image layer
    canvas.setLayers([img_lyr])
    canvas.show()

def updateExtents(canvas, ref_canvas):
    """Updates the extent of a map canvas to match a reference canvas"""

    if canvas.extent() != ref_canvas.extent():
        canvas.setExtent(ref_canvas.extent())
        canvas.refresh()

def panCanvas(dlg, canvas_list):
    """Enables/disables pan tool for provided map canvas(es)"""
    
    dlg.Swipe_toolButton.setChecked(False) # tools are exclusive, so turn off swipe button
    dlg.pan_tools = []

    # create pan tools for each canvas
    for canvas in canvas_list:
        dlg.pan_tools.append(QgsMapToolPan(canvas))
    
    # set map tool for each canvas to the appropriate pan tool
    for i in range(len(canvas_list)):
        if dlg.Pan_toolButton.isChecked():
            canvas_list[i].setMapTool(dlg.pan_tools[i])
        else:
            canvas_list[i].unsetMapTool(dlg.pan_tools[i])