# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MLP_IA_Suite
                                 A QGIS plugin
 This plugin contains an end-to-end workflow for analysing terrestrial oblique images 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-15
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Claire Wright | Mountain Legacy Project
        email                : claire.wright.mi@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 """

"""This module contains functions for refreshing each tool page in the plugin"""

from qgis.PyQt.QtWidgets import QMessageBox

def messageBox(item):
    """Shows message box asking about unsaved items"""

    msgBox = QMessageBox()
    msgBox.setText("{} is not saved.".format(item))
    msgBox.setInformativeText("Refresh anyway?")
    msgBox.setStandardButtons(QMessageBox.Yes)
    msgBox.addButton(QMessageBox.No)
    msgBox.setDefaultButton(QMessageBox.No)
    ret = msgBox.exec()

    return ret

def refresh_PyLC(dlg):
    """Refresh UI in PyLC tab"""

    # check if mask is saved
    if dlg.refresh_dict["PyLC"]["Mask"] is None and dlg.PyLC_path is not None:
        ret = messageBox("PyLC mask")
        if ret == QMessageBox.No:
            return

    # then empty all canvases
    

    # refresh all text boxes

    # refresh save filepaths

def refresh_VP(dlg):
    """Refresh UI in VP tab"""

    # first check if all products are saved
    # camera parameters, VP

    # then empty all canvases
    # refresh all text boxes

    # refresh save filepaths

def refresh_align(dlg):
    """Refresh UI in align tab"""

    # first check if all products are saved
    # CPs, aligned image, aligned mask if available

    # then empty all canvases
    # refresh all text boxes

    # refresh save filepaths

def refresh_VS(dlg):
    """Refresh UI in VS tab"""

    # first check if VS is saved

    # then empty all canvases
    # refresh all text boxes

    # refresh save filepaths